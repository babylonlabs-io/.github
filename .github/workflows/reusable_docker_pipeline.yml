name: Docker Build & Publish

on:
  workflow_call:
    inputs:
      dockerfile:
        required: false
        type: string
        description: "Path to Dockerfile"
        default: "Dockerfile"
      dockerContext:
        required: false
        type: string
        description: "The Docker context"
        default: "."
      publish:
        required: true
        type: boolean
      repoName:
        required: false
        type: string
        description: "Custom repository name"
        default: ""
      go-private-repos-authentication:
        description: 'Enable authentication for private repositories'
        type: boolean
        default: false
      platforms:
        required: false
        type: string
        description: "Target platforms for Docker build"
        default: "linux/amd64,linux/arm64"

jobs:
  prepare-metadata:
    runs-on: ubuntu-22.04
    outputs:
      image-name: ${{ steps.set_image_name.outputs.IMAGE_NAME }}
    steps:
      - name: Determine image name
        id: set_image_name
        run: |
          if [ -n "${{ inputs.repoName }}" ]; then
            echo "IMAGE_NAME=${{ inputs.repoName }}" >> $GITHUB_OUTPUT
          else
            echo "IMAGE_NAME=$(echo $GITHUB_REPOSITORY | cut -d '/' -f 2)" >> $GITHUB_OUTPUT
          fi
  docker_build:
    runs-on: ${{ matrix.runner }}
    needs: prepare-metadata
    env:
     IMAGE_NAME: ${{ needs.prepare-metadata.outputs.image-name }} 
    strategy:
      fail-fast: false
      matrix:
        platform:
          - linux/amd64
          - linux/arm64
        runner:
          - ubuntu-22.04
          # - self-hosted
        # exclude:
        # - platform: linux/amd64
        #   runner: self-hosted
        # - platform: linux/arm64
        #   runner: ubuntu-22.04
    steps:
      - name: Prepare
        run: |
          platform=${{ matrix.platform }}
          echo "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_ENV
  
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # This block is used to not hard-coded the secrets in Build Docker image
      # Secrets are only added when necessary 
      - name: Generate and mask build secrets
        id: set-build-secrets
        run: |
          SECRETS=""
          if [ -n "${{ inputs.go-private-repos-authentication }}" ]; then
            SECRETS+='"GO_PRIVATE_TOKEN=${{ secrets.GO_PRIVATE_TOKEN }}"\n'
          fi
          echo "::add-mask::$SECRETS"
          echo "SECRETS<<EOF" >> $GITHUB_OUTPUT
          echo -e "$SECRETS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        shell: bash

      - name: Build Docker image
        uses: docker/build-push-action@v6
        id: build
        with:
          platforms: ${{ matrix.platform }}
          outputs: type=docker,dest=/tmp/${{ env.IMAGE_NAME }}.tar
          context: ${{ inputs.dockerContext }}
          file: ${{ inputs.dockerfile }}
          secrets: ${{ steps.set-build-secrets.outputs.SECRETS }}
      
      - name: Upload Docker image to workspace
        if: inputs.publish == true
        uses: actions/upload-artifact@v4
        with:
          name: "${{ env.IMAGE_NAME }}-${{ env.PLATFORM_PAIR }}"
          path: /tmp/${{ env.IMAGE_NAME }}.tar
          retention-days: 1     
      
  merge_dockerhub:
    runs-on: ubuntu-latest
    if: inputs.publish
    needs:
      - docker_build
      - prepare-metadata
    env:
      IMAGE_NAME: ${{ needs.prepare-metadata.outputs.image-name }} 
    steps:
      - name: Download Docker image artifacts
        uses: actions/download-artifact@v4
        with:
          path: /tmp/
          pattern: ${{ env.IMAGE_NAME }}-*
          merge-multiple: true
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ vars.DOCKERHUB_REGISTRY_ID }}/${{ needs.prepare-metadata.outputs.image-name }}
          ags: |
            type=sha,enable=true,priority=100,prefix=,suffix=,format=long
            type=ref,enable=true,priority=200,prefix=,suffix=,event=tag
      
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Create manifest list and push
        working-directory: /tmp/digests
        run: |
          tags=$(jq -cr '.tags | map("-t " + .) | join(" ")'  <<< "$DOCKER_METADATA_OUTPUT_JSON")
          digests=$(printf "${{ vars.DOCKERHUB_REGISTRY_ID }}/${{ needs.prepare-metadata.outputs.image-name }}@sha256:%s " $(ls /tmp/digests))
          docker buildx imagetools create $tags $digests
          
      - name: Inspect image
        run: |
          docker buildx imagetools inspect ${{ vars.DOCKERHUB_REGISTRY_ID }}/${{ needs.prepare-metadata.outputs.image-name }}:${{ steps.meta.outputs.version }}

  merge_ecr:
    runs-on: ubuntu-latest
    if: inputs.publish
    needs:
      - docker_build
      - prepare-metadata
    env:
      IMAGE_NAME: ${{ needs.prepare-metadata.outputs.image-name }} 
    steps:
      - name: Download Docker image artifacts
        uses: actions/download-artifact@v4
        with:
          path: /tmp/
          pattern: ${{ env.IMAGE_NAME }}-*
          merge-multiple: true
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ vars.AWS_ECR_REGISTRY_ID }}/${{ needs.prepare-metadata.outputs.image-name }} 
          tags: |
            type=sha,enable=true,priority=100,prefix=,suffix=,format=long
            type=ref,enable=true,priority=200,prefix=,suffix=,event=tag
      
      - name: Login to ECR
        uses: docker/login-action@v3
        with:
          registry: ${{ vars.AWS_ECR_REGISTRY_ID }}
          username: ${{ secrets.AWS_ACCESS_KEY_ID }}
          password: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      
      - name: Create manifest list and push
        working-directory: /tmp/digests
        run: |
          tags=$(jq -cr '.tags | map("-t " + .) | join(" ")'  <<< "$DOCKER_METADATA_OUTPUT_JSON")
          digests=$(printf "${{ vars.AWS_ECR_REGISTRY_ID }}/${{ needs.prepare-metadata.outputs.image-name }}@sha256:%s " $(ls /tmp/digests))
          docker buildx imagetools create $tags $digests
          
      - name: Inspect image
        run: |
          docker buildx imagetools inspect ${{ vars.AWS_ECR_REGISTRY_ID }}/${{ needs.prepare-metadata.outputs.image-name }}:${{ steps.meta.outputs.version }}