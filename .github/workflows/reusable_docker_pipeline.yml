name: Docker Build & Publish

on:
  workflow_call:
    inputs:
      dockerfile:
        required: false
        type: string
        description: "Path to Dockerfile"
        default: "Dockerfile"
      dockerContext:
        required: false
        type: string
        description: "The Docker context"
        default: "."
      publish:
        required: true
        type: boolean
      repoName:
        required: false
        type: string
        description: "Custom repository name"
        default: ""

jobs:
  docker_build:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        if: inputs.publish == true
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Determine image name
        id: set_image_name
        run: |
          if [ -n "${{ inputs.repoName }}" ]; then
            echo "IMAGE_NAME=${{ inputs.repoName }}" >> $GITHUB_ENV
          else
            echo "IMAGE_NAME=$(echo $GITHUB_REPOSITORY | cut -d '/' -f 2)" >> $GITHUB_ENV
          fi

      - name: Build Docker image
        uses: docker/build-push-action@v6
        with:
          tags: ${{ env.IMAGE_NAME }}:${{ github.sha }}
          outputs: type=docker,dest=/tmp/${{ env.IMAGE_NAME }}.tar
          context: ${{ inputs.dockerContext }}
          file: ${{ inputs.dockerfile }}
 
      - name: Upload Docker image to workspace
        if: inputs.publish == true
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.IMAGE_NAME }}
          path: /tmp/${{ env.IMAGE_NAME }}.tar

  dockerhub_publish:
    runs-on: ubuntu-22.04
    if: inputs.publish == true
    needs: ["docker_build"]
    steps:
    - name: Determine image name
      id: set_image_name
      run: |
        if [ -n "${{ inputs.repoName }}" ]; then
          echo "IMAGE_NAME=${{ inputs.repoName }}" >> $GITHUB_ENV
        else
          echo "IMAGE_NAME=$(echo $GITHUB_REPOSITORY | cut -d '/' -f 2)" >> $GITHUB_ENV
        fi

    - name: Download Docker image from workspace
      uses: actions/download-artifact@v4
      with:
        name: ${{ env.IMAGE_NAME }}
        path: /tmp/

    - name: Load Docker image
      run: docker load -i /tmp/${{ env.IMAGE_NAME }}.tar

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Push Docker image with SHA
      run: |
        docker tag ${{ env.IMAGE_NAME }}:${{ github.sha }} ${{ vars.DOCKERHUB_REGISTRY_ID }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        docker push ${{ vars.DOCKERHUB_REGISTRY_ID }}/${{ env.IMAGE_NAME }}:${{ github.sha }}

    - name: Push Docker image with Tag
      if: startsWith(github.ref, 'refs/tags/')
      run: |
        docker tag ${{ env.IMAGE_NAME }}:${{ github.sha }} ${{ vars.DOCKERHUB_REGISTRY_ID }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}
        docker push ${{ vars.DOCKERHUB_REGISTRY_ID }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}

  ecr_publish:
    runs-on: ubuntu-22.04
    if: inputs.publish == true
    needs: ["docker_build"]
    steps:
    - name: Determine image name
      id: set_image_name
      run: |
        if [ -n "${{ inputs.repoName }}" ]; then
          echo "IMAGE_NAME=${{ inputs.repoName }}" >> $GITHUB_ENV
        else
          echo "IMAGE_NAME=$(echo $GITHUB_REPOSITORY | cut -d '/' -f 2)" >> $GITHUB_ENV
        fi

    - name: Download Docker image from workspace
      uses: actions/download-artifact@v4
      with:
        name: ${{ env.IMAGE_NAME }}
        path: /tmp/

    - name: Load Docker image
      run: docker load -i /tmp/${{ env.IMAGE_NAME }}.tar

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ vars.AWS_ECR_REGION }}

    - name: Login to Amazon ECR Private
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Push Docker image with SHA
      run: |
        docker tag ${{ env.IMAGE_NAME }}:${{ github.sha }} ${{ vars.AWS_ECR_REGISTRY_ID }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        docker push ${{ vars.AWS_ECR_REGISTRY_ID }}/${{ env.IMAGE_NAME }}:${{ github.sha }}

    - name: Push Docker image with Tag
      if: startsWith(github.ref, 'refs/tags/')
      run: |
        docker tag ${{ env.IMAGE_NAME }}:${{ github.sha }} ${{ vars.AWS_ECR_REGISTRY_ID }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}
        docker push ${{ vars.AWS_ECR_REGISTRY_ID }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}